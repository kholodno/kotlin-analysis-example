autoCorrect: true

# Каждое замечание в имеет свой "вес" в зависимости от принадлежности к ruleSet.
# В данном блоке производится настройка "весов" для кадого ruleSet и лимит до ошибки и предупреждения (включительно).
build:
  warningThreshold: 5
  failThreshold: 10
  weights:
    complexity: 2
    formatting: 0
    LongParameterList: 1
    comments: 0.5

potential-bugs:
  active: true
  # Срабатывает в случае дублирования в when блоках.
  DuplicateCaseInWhenExpression:
    active: true
  # ???
  EqualsWithHashCodeExist:
    active: true
  # Срабатывает при излишнем вызове GarbageCollector
  # TODO: Определить что он считает "излишним"
  ExplicitGarbageCollectionCall:
    active: true

# Вызывается в случе, если try-catch блок слишком общий
# (например ловит только Exception, даже если там дальше обработка when)
exceptions:
  active: true

# Вызывается в случае обнаружения любого пустого блока (функции, if, when, catch итд)
empty-blocks:
  active: true

complexity:
  active: true
  # Срабатывает, если количество действий в методе больше указанного числа
  LongMethod:
    threshold: 20
  # Срабатывает, если количество входных параметров у функции больше указанного числа
  LongParameterList:
    threshold: 5
  # Срабатывает, если количество строк с действиями в классе больше указанного числа
  LargeClass:
    threshold: 150
  ComplexMethod:
    threshold: 10
  # Срабатывает, если количество функций в классе больше указанного числа
  TooManyFunctions:
    threshold: 10
  ComplexCondition:
    threshold: 3

code-smell:
  active: true
  FeatureEnvy:
    threshold: 0.5
    weight: 0.45
    base: 0.5

# Данный блок вызывается специально командой detektFormat
formatting:
  active: true
  useTabs: true
  Indentation:
    active: false
    indentSize: 4
  # Излишние пустые строки.
  ConsecutiveBlankLines:
    active: true
    autoCorrect: true
  # Излишние пробелы.
  MultipleSpaces:
    active: true
    autoCorrect: true
  # Нет пробелов после запятой.
  SpacingAfterComma:
    active: true
    autoCorrect: true
  # Нет пробелов после ключевого слово.
  SpacingAfterKeyword:
    active: true
    autoCorrect: true
  # Нет пробелов вокруг двоеточия.
  SpacingAroundColon:
    active: true
    autoCorrect: true
  # Нет пробелов фигурных скобок.
  SpacingAroundCurlyBraces:
    active: true
    autoCorrect: true
  # Нет пробелов вокруг оператора (+, - и др.).
  SpacingAroundOperator:
    active: true
    autoCorrect: true
  TrailingSpaces:
    active: true
    autoCorrect: true
  # Убрать излишние импорты.
  UnusedImports:
    active: true
    autoCorrect: true
  # Использование необязательной точки с запятой.
  OptionalSemicolon:
    active: true
    autoCorrect: true
  OptionalUnit:
    active: true
    autoCorrect: true
  ExpressionBodySyntax:
    active: false
    autoCorrect: true
  ExpressionBodySyntaxLineBreaks:
    active: false
    autoCorrect: true

style:
  active: true
  WildcardImport:
    active: true
  # Срабатывает, при нарушении правил.
  NamingConventionViolation:
    active: true
    variablePattern: '^(_)?[a-z$][a-zA-Z$0-9]*$'
    constantPattern: '^([A-Z_]*|serialVersionUID)$'
    methodPattern: '^[a-z$][a-zA-Z$0-9]*$'
    classPattern: '[A-Z$][a-zA-Z$]*'
    enumEntryPattern: '^[A-Z$][a-zA-Z_$]*$'

comments:
  active: true
  # Срабатывает, при присутствии документации к приватному методу.
  CommentOverPrivateMethod:
    active: true
  # Срабатывает, при присутствии документации к приватному полю.
  CommentOverPrivateProperty:
    active: true
  # Срабатывает, при отсутствии документации к публичному классу.
  NoDocOverPublicClass:
    active: false
  # Срабатывает, при отсутствии документации к публичному методу.
  NoDocOverPublicMethod:
    active: false

# *experimental feature*
# Migration rules can be defined in the same config file or a new one
migration:
  active: true
  imports:
    # your.package.Class: new.package.or.Class
    # for example:
    # io.gitlab.arturbosch.detekt.api.Rule: io.gitlab.arturbosch.detekt.rule.Rule